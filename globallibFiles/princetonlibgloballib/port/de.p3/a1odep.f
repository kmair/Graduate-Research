      SUBROUTINE A1ODEP(T0, V0, T1, V1, NV, N, NLEQS, D, DA, OK,
     1   ERROR, ERRPAR, INMI)
      INTEGER NV
      EXTERNAL NLEQS, D, DA, ERROR, INMI
      INTEGER N
      REAL T0, V0(NV), T1, V1(NV), ERRPAR(2)
      LOGICAL NLEQS, DA, OK
      COMMON /A10DEY/ WV, RV, IV, LV
      INTEGER IV(40)
      REAL WV(30), RV(30)
      LOGICAL LV(20)
      COMMON /A1ODEG/ TJ, DTJ, GETJAC, SEPATE, USENGJ, USENNS, USENFD
      REAL TJ, DTJ
      LOGICAL GETJAC, SEPATE, USENGJ, USENNS, USENFD
      COMMON /A1ODEM/ THETA, EGIVE, MINIT, MAXIT, KEEJAC, IRCS
      INTEGER MINIT, MAXIT, KEEJAC, IRCS
      REAL THETA, EGIVE
      COMMON /A1ODES/ IMEM
      INTEGER IMEM
      COMMON /A10DER/ NJS, NFS, NTSS, NSSS, NES, NNITS, NNDS, NNFS, NRS
      INTEGER NJS, NFS, NTSS, NSSS, NES, NNITS
      INTEGER NNDS, NNFS, NRS
      COMMON /A1ODEF/ FNUM
      INTEGER FNUM
      INTEGER ISTEP
      REAL TSTART, T, DT, FLOAT
      EQUIVALENCE (TSTART, WV(1))
C TIME-STEPPING SCHEME FOR IODES.
C SCRATCH SPACE ALLOCATED -
C     S(A1ODEP) = NV**2 + S(NLEQS).
C REAL WORDS.
      CALL ENTER(1)
      DT = (T1-T0)/FLOAT(N)
C INITIAL APPROXIMATION FOR V1.
      CALL MOVEFR(NV, V0, V1)
      IF (DA(V0, V1, NV, T1, DT, D, V1, TJ, DTJ, GETJAC, SEPATE, USENGJ,
     1   USENNS, USENFD, 0, -2, FNUM, THETA, IRCS, KEEJAC)) CONTINUE
      DO  3 ISTEP = 1, N
         T = T0+(FLOAT(ISTEP-1)+THETA)*DT
         NSSS = NSSS+1
         IF (KEEJAC .NE. 1) GOTO 1
            GETJAC = .TRUE.
            TJ = T
   1     IF (DT .GT. 0. .AND. T .GT. T1 .OR. DT .LT. 0. .AND. T .LT. T1)
     1       T = T1
         OK = NLEQS(V1, NV, T, DT, D, DA, ERROR, INMI, ERRPAR)
         IF (FNUM .LT. 3 .OR. KEEJAC .NE. 4) GOTO 2
            GETJAC = T0 .NE. TJ
            TJ = T0
   2     IF (.NOT. OK) GOTO  4
   3     CONTINUE
   4  CALL LEAVE
      RETURN
      END
