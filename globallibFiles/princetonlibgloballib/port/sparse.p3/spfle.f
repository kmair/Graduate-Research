      SUBROUTINE SPFLE(N, ORDER, AROW, ISIZE, B, IB, NB)
      INTEGER IB, NB
      EXTERNAL AROW, I4YX
      INTEGER N, ISIZE
      REAL B(IB, NB)
      LOGICAL ORDER
      DOUBLE PRECISION DSTAK(500)
      COMMON /CSTAK/ DSTAK
      INTEGER IIA, IMC, MCP, MAX, IEX, IMR
      INTEGER JLU, MRP, NUM, NUMBER, ISTKGT, ISTKQU
      INTEGER I, K, L, ILIN, IERR, ISUB
      INTEGER TEMP, LAST, TEMP1, IA, IC, IHEAD
      INTEGER II(1000), JJ, LL, IT, IV, IU
      INTEGER LU, IZ, NU, ILEFT, IC1
      REAL BEF, ABS, EPS, D(1000), AMAX1, BE
      REAL R1MACH
      LOGICAL MOVE
      EQUIVALENCE (D(1), II(1), DSTAK(1))
C THIS SUBROUTINE SOLVES AX = B WHERE A IS A SPARSE MATRIX
C INPUT PARAMETERS
C N      NUMBER OF EQUATIONS
C ORDER   LOGICAL VARIABLE. IF .TRUE. REORDERING FOR
C         SPARSITY WILL BE PERFORMED.
C AROW    SUBROUTINE OF THE FORM GETA(I,ROW,JCOL,NUM) WHICH
C         FOR A GIVEN INPUT I RETURNS THE NONZERO ELEMENTS OF
C         THE ITH ROW OF THE MATRIX A IN THE
C         REAL VECTOR ROW AND THE CORRESPONDING INDICES IN
C         JCOL. THE VARIABLE NUM RETURNS THE NUMBER OF NONZERO
C         ELEMENTS IN THE ITH ROW. AROW SHOULD BE DECLARED
C         EXTERNAL IN THE CALLING PROGRAM.
C B      RIGHT HAND SIDE MATRIX,DESTROYED ON OUTPUT
C IB     ROW DIMENSION OF B
C NB     NUMBER OF COLUMNSOF B
C OUTPUT PARAMETERS
C B      THE SOLUTION TO AX=B
C ISIZE  ACTUAL NUMBER OF ELEMENTS IN THE A ARRAY THAT WAS NEEDED
C        FOR THE DECOMPOSITION
C SPACE ALLOCATED AND DEALLOCATED-3N+2 INTEGER AND N LE
C REAL LOCATIONS PLUS ISIZE INTEGER AND
C REAL LOCATIONS NEED TO HOLD THE U FROM THE
C LU DECOMPOSITION OF A
C ERROR STATES
C 1 N.LT.1        FATAL
C 2 IB .LT. N
C 3 NB .LT. 1
C 10+K     NULL ROW           FATAL
C 3N+K+10   SINGULAR MATRIX OF RANK K      RECOVERABLE
C 2N+K+10  RAN OUT OF SPACE WHEN PROCEESING ROW K
C N+K+10 INCORRECT COLUMN INDEX
C/6S
C     IF (N .LT. 1) CALL SETERR(13H SPFLE-N.LT.1, 13, 1, 2)
C     IF (IB .LT. N) CALL SETERR(14H SPFLE-IB.LT.N, 14, 3, 2)
C     IF (NB .LT. 1) CALL SETERR(14H SPFLE-NB.LT.1, 14, 4, 2)
C/7S
      IF (N .LT. 1) CALL SETERR(' SPFLE-N.LT.1', 13, 1, 2)
      IF (IB .LT. N) CALL SETERR(' SPFLE-IB.LT.N', 14, 3, 2)
      IF (NB .LT. 1) CALL SETERR(' SPFLE-NB.LT.1', 14, 4, 2)
C/
      CALL ENTER(1)
      IA = ISTKGT(N+1, 2)
      IIA = IA
      II(IA) = 1
C GET SPACE FOR THE COLUMN PERMUTATION VECTOR AND ITS INVERSE
      IC = ISTKGT(2*N, 2)
      IC1 = IC-1
      ILEFT = ISTKQU(2)-10
      ISUB = 2*N+2
      IF(ORDER)ISUB=3*N+2
      ILIN = ((ILEFT-ISUB)*II(7))/(II(7)+II(8))
C GET SPACE FOR A AND LU AND DIVIDE IT BETWEEN REAL AND INTEGER
      JLU = ISTKGT(ILIN, 2)
      LU = ISTKGT(ILIN, 3)
      LL = LU
      JJ = JLU
      NU = ILIN
      MCP = IC+N
      IMC = MCP-1
C READ IN THE MATRIX AND COMPUTE ITS NORM
      BEF = 0.0
      DO  2 I = 1, N
         CALL AROW(I, D(LL), II(JJ), NUM)
         BE = 0.0
         L = LL
         IERR = I+10
         IF (NUM .LT. 1) GOTO  12
         DO  1 K = 1, NUM
            BE = BE+ABS(D(L))
            L = L+1
   1        CONTINUE
         BEF = AMAX1(BE, BEF)
         IIA = IIA+1
         II(IIA) = II(IIA-1)+NUM
         JJ = JJ+NUM
         LL = LL+NUM
         NU = NU-NUM
         IF (NU .LT. N) GOTO  11
         TEMP1 = I+IC1
         IMC = IMC+1
         II(IMC) = I
         II(TEMP1) = I
   2     CONTINUE
      IF (.NOT. ORDER) GOTO 6
         IERR=2*N+11
         IF (NU .LE. 4*II(IIA)-N) GOTO 3
            MOVE = .FALSE.
C GENERATE COLUMN ORDERING WHEN PIVOTING FOR SPARSITY
C TEST IF HAVE ENOUGH SPACE INBETWEEN PRESENT COLUMN INDICES
C AND NONZERO ELEMENTS
            GOTO  4
   3        MOVE = .TRUE.
C DO NOT HAVE ENOUGH SPACE AND REPACKING IS NECESSARY
            CALL ISTKRL(1)
            NUMBER = II(IIA)
            JLU= ISTKMD(NUMBER)
            IT = ISTKGT(NUMBER, 3)
C MOVE REAL ELEMENTS FROM HALFWAY IN STACK UNTIL THE END
            CALL MOVEFR(NUMBER, D(LU), D(IT))
            NU = ISTKQU(2)-10
            JJ = ISTKGT(NU, 2)
   4     MAX = (NU-N)/2
         IV = JJ
         L = IV+MAX
         IHEAD = L+MAX
         IF (MAX .LT. N) GOTO  11
         IERR = 0
         CALL S4MDM(N, I4YX, MAX, II(IV), II(L), II(IHEAD),
     1      II(MCP), II(IC), II(IV), IERR,II(IA),II(JLU),1)
         IF (IERR .GT. 2*N+10) GOTO  11
C/6S
C        IF (IERR .GT. N+10) CALL SETERR(
C    1      29H SPFLE-INCORRECT COLUMN INDEX, 29, IERR, 2)
C/7S
         IF (IERR .GT. N+10) CALL SETERR(
     1      ' SPFLE-INCORRECT COLUMN INDEX', 29, IERR, 2)
C/
         IF (.NOT. MOVE) GOTO 5
            CALL ISTKRL(2)
C PUT THINGS BACK WITH NUMERICAL ELEMENTS IN THE MIDDLE OF THE
C AVAILABLE SPACE
            JLU= ISTKMD(ILIN)
            LU = ISTKGT(ILIN, 3)
            CALL MOVEBR(NUMBER, D(IT), D(LU))
   5     CONTINUE
   6  IEX = JLU+ILIN-N
      IZ = LU+ILIN-N
      ILIN = ILIN-N
      IU = ISTKGT(ISUB, 2)
      TEMP = IU+N+1
      MRP = 1
C PUT ROW ORDERING TO COLUMN ORDERING
      IF(.NOT.ORDER) GO TO 77
      MRP = TEMP+N+1
      IMR = MRP
      IMC = MCP
      DO  7 I = 1, N
         II(IMR) = II(IMC)
         IMC = IMC+1
         IMR = IMR+1
   7     CONTINUE
 77   EPS = BEF*R1MACH(4)
      CALL S4FLE(N, II(IA), II(JLU), D(LU), ILIN, II(IU), II(TEMP), D(
     1  IZ), II(IEX), B, IB, NB, II(IC), II(MRP), II(MCP), ORDER, IERR,
     1   0.1, LAST, EPS)
      IF (IERR .NE. 0) GOTO 8
         ISIZE = LAST-1
         CALL S4FBS(N, B, IB, NB, II(JLU), D(LU), II(IA), II(IU), II(
     1      IEX), II(MCP), II(MRP), ORDER, D(IZ))
         GOTO  13
   8     IF (IERR .LE. N+10) GOTO  12
         IF (IERR .GT. 2*N+10) GOTO 9
C/6S
C           CALL SETERR(22H SPFLE-SINGULAR MATRIX, 22, IERR, 1)
C/7S
            CALL SETERR(' SPFLE-SINGULAR MATRIX', 22, IERR, 1)
C/
            GOTO  13
   9     CONTINUE
C/6S
C 11  CALL SETERR(25H SPFLE-INSUFFICIENT SPACE, 25, IERR, 1)
C/7S
  11  CALL SETERR(' SPFLE-INSUFFICIENT SPACE', 25, IERR, 1)
C/
      GOTO  13
C/6S
C 12  CALL SETERR(15H SPFLE-NULL ROW, 15, IERR, 1)
C/7S
  12  CALL SETERR(' SPFLE-NULL ROW', 15, IERR, 1)
C/
  13  CALL LEAVE
      RETURN
      END
