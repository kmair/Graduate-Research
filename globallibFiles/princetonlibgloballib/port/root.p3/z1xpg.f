      SUBROUTINE Z1XPG(N, STEEP, DELTA, P, P2, PMIN, G, G2, XP,
     1   XG, DX2)
      INTEGER N
      REAL DELTA, P(N), P2, PMIN, G(N), G2
      REAL XP, XG, DX2
      LOGICAL STEEP
      REAL SDOT, B, C, PG, SQRT
C GET XP AND XG SO THAT DX(J)=XP*P(J)+XG*G(J) HAS LENGTH .LE. DELTA.
C (LENGTH ALSO .LE.P2)
C INPUTS
C N = LNUMBER OF COMPONENTS
C DELTA = MAXIMUM DX LENGTH
C P = NEWTON VECTOR
C P2 = ITS LENGTH
C PMIN = SMALLEST ALLOWABLE XP
C G = STEEPEST-DESCENT VECTOR
C G2 = ITS LENGTH
C OUTPUTS
C XP AND XG
C DX2 = LENGTH OF DX-VECTOR
      IF (P2 .GT. DELTA) GOTO 1
         DX2 = P2
C USE NEWTON STEP
         XP = 1.0
         XG = 0.0E0
         GOTO  4
   1     IF ((.NOT. STEEP) .AND. DELTA .GT. G2 .AND. DELTA .GE. PMIN*P2)
     1       GOTO 2
            DX2 = DELTA
C DX ALONG STEEPEST-DESCENT
            XG = DX2/G2
            XP = 0.0E0
            GOTO  3
   2        PG = SDOT(N, P, 1, G, 1)
C DX IS SOME STEEPEST-DESCENT PLUS SOME NEWTON
            DX2 = DELTA
            C = DX2**2-G2**2
            B = G2**2-PG
            XP = C/(B+SQRT(B**2+C*(P2**2-2.0E0*PG+G2**2)))
            XG = 1.0E0-XP
   3  CONTINUE
   4  RETURN
      END
