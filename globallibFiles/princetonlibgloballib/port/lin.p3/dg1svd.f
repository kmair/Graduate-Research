      SUBROUTINE DG1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,Z,B,
     1   IRHS,RV1,D, MFLAG)
      INTEGER NAU,NV,M,N,IRHS,IP1,I,J,K,IM1
      INTEGER MFLAG
      DOUBLE PRECISION A(NAU,N),W(N),U(NAU,N),V(NV,N),
     1  B(NAU,IRHS),Z(N,N),RV1(N),D(N)
      DOUBLE PRECISION G,SCALE,DSQRT,F,S,H
      LOGICAL MATU,MATV
C
C     THIS SUBROUTINE IS A MODIFICATION OF THE GOLUB-REINSCH PROCEDURE
C                                                               T
C     (1) FOR COMPUTING THE SINGULAR VALUE DECOMPOSITION A = UWV  OF A
C     DOUBLE PRECISION M BY N RECTANGULAR MATRIX.
C     THE ALGORITHM IMPLEMENTED IN THIS
C     ROUTINE HAS A HYBRID NATURE.  WHEN M IS APPROXIMATELY EQUAL TO N,
C     THE GOLUB-REINSCH ALGORITHM IS USED, BUT WHEN M IS GREATER THAN
C     APPROXIMATELY 2*N, A MODIFIED VERSION OF THE GOLUB-REINSCH
C     ALGORITHM IS USED.  THIS MODIFIED ALGORITHM FIRST TRANSFORMS A
C                                                                T
C     INTO UPPER TRIANGULAR FORM BY HOUSEHOLDER TRANSFORMATIONS L
C     AND THEN USES THE GOLUB-REINSCH ALGORITHM TO FIND THE SINGULAR
C     VALUE DECOMPOSITION OF THE RESULTING UPPER TRIANGULAR MATRIX R.
C     WHEN U IS NEEDED EXPLICITLY, AN EXTRA ARRAY Z (OF SIZE AT LEAST
C     N BY N) IS NEEDED, BUT OTHERWISE Z MAY COINCIDE WITH EITHER
C     A OR V AND NO EXTRA STORAGE IS REQUIRED.  THIS HYBRID METHOD
C     SHOULD BE MORE EFFICIENT THAN THE GOLUB-REINSCH ALGORITHM WHEN
C     M IS MUCH BIGGER THAN N.  FOR DETAILS, SEE (2).
C
C     HYBSVD CAN ALSO BE USED TO COMPUTE THE MINIMAL LENGTH LEAST
C     SQUARES SOLUTION TO THE OVERDETERMINED LINEAR SYSTEM A*X=B.
C
C     NOTICE THAT THE SINGULAR VALUE DECOMPOSITION OF A MATRIX
C     IS UNIQUE ONLY UP TO THE SIGN OF THE CORRESPONDING COLUMNS
C     OF U AND V.
C
C     THIS ROUTINE HAS BEEN CHECKED BY THE PFORT VERIFIER (3) FOR
C     ADHERENCE TO A LARGE, CAREFULLY DEFINED, PORTABLE SUBSET OF
C     AMERICAN NATIONAL STANDARD FORTRAN CALLED PFORT.
C
C     REFERENCES
C
C     (1) GOLUB,G.H. AND REINSCH,C. (1970) SINGULAR VALUE
C         DECOMPOSITION AND LEAST SQUARES SOLUTIONS,
C         NUMER. MATH. 14,403-420, 1970.
C
C     (2) CHAN,T.F (1977) AN IMPROVED ALGORITHM  FOR COMPUTING THE
C         SINGULAR VALUE DECOMPOSITION.
C         TOMS, 8, PP. 72-83, (1982).
C
C     (3) RYDER,B.G (1974) THE PFORT VERIFIER, SOFTWARE -
C         PRACTICE AND EXPERIENCE, VOL.4, 359-377, 1974.
C
C     HYBSVD ASSUMES M .GE. N.  IF M .LT. N, THEN COMPUTE THE
C                                      T      T    T            T
C     SINGULAR VALUE DECOMPOSITION OF A . IF A =UWV , THEN A=VWU .
C
C     ON INPUT
C
C        NAU MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL
C          ARRAY PARAMETERS A,U AND B AS DECLARED IN THE CALLING PROGRAM
C          DIMENSION STATEMENT.  NOTE THAT NAU MUST BE AT LEAST
C          AS LARGE AS M,
C
C        NV MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL
C          ARRAY PARAMETER V AS DECLARED IN THE CALLING PROGRAM
C          DIMENSION STATEMENT. NV MUST BE AT LEAST AS LARGE AS N,
C
C        NZ MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL
C          ARRAY PARAMETER Z AS DECLARED IN THE CALLING PROGRAM
C          DIMENSION STATEMENT.  NOTE THAT NZ MUST BE AT LEAST
C          AS LARGE AS N,
C
C        M IS THE NUMBER OF ROWS OF A (AND U),
C
C        N IS THE NUMBER OF COLUMNS OF A (AND U) AND THE ORDER OF V,
C
C        A CONTAINS THE RECTANGULAR INPUT MATRIX TO BE DECOMPOSED,
C
C        B CONTAINS THE IRHS RIGHT-HAND-SIDES OF THE OVERDETERMINED
C         LINEAR SYSTEM A*X=B. IF IRHS .GT. 0,
C         THEN ON OUTPUT, THESE IRHS COLUMNS IN B
C                       T
C         WILL CONTAIN U B. THUS, TO COMPUTE THE MINIMAL LENGTH LEAST
C                                               +
C         SQUARES SOLUTION, ONE MUST COMPUTE V*W  TIMES THE COLUMNS OF
C                   +                        +
C         B, WHERE W  IS A DIAGONAL MATRIX, W (I)=0 IF W(I) IS
C         NEGLIGIBLE, OTHERWISE IS 1/W(I). IF IRHS=0, B MAY COINCIDE
C         WITH A OR U AND WILL NOT BE REFERENCED,
C
C        IRHS IS THE NUMBER OF RIGHT-HAND-SIDES OF THE OVERDETERMINED
C         SYSTEM A*X=B. IRHS SHOULD BE SET TO ZERO IF ONLY THE SINGULAR
C         VALUE DECOMPOSITION OF A IS DESIRED,
C
C        MATU SHOULD BE SET TO .TRUE. IF THE U MATRIX IN THE
C          DECOMPOSITION IS DESIRED, AND TO .FALSE. OTHERWISE,
C
C        MATV SHOULD BE SET TO .TRUE. IF THE V MATRIX IN THE
C          DECOMPOSITION IS DESIRED, AND TO .FALSE. OTHERWISE.
C
C        WHEN HYBSVD IS USED TO COMPUTE THE MINIMAL LENGTH LEAST
C        SQUARES SOLUTION TO AN OVERDETERMINED SYSTEM, MATU SHOULD
C        BE SET TO .FALSE. , AND MATV SHOULD BE SET TO .TRUE.  .
C
C     ON OUTPUT
C
C        A IS UNALTERED (UNLESS OVERWRITTEN BY U OR V),
C
C        W CONTAINS THE N (NON-NEGATIVE) SINGULAR VALUES OF A (THE
C          DIAGONAL ELEMENTS OF W).  THEY ARE UNORDERED.  IF AN
C          ERROR EXIT IS MADE, THE SINGULAR VALUES SHOULD BE CORRECT
C          FOR INDICES IERR-10+1,IERR-10+2,...,N,
C
C        U CONTAINS THE MATRIX U (ORTHOGONAL COLUMN VECTORS) OF THE
C          DECOMPOSITION IF MATU HAS BEEN SET TO .TRUE.  OTHERWISE
C          U IS USED AS A TEMPORARY ARRAY.  U MAY COINCIDE WITH A.
C          IF AN ERROR EXIT IS MADE, THE COLUMNS OF U CORRESPONDING
C          TO INDICES OF CORRECT SINGULAR VALUES SHOULD BE CORRECT,
C
C        V CONTAINS THE MATRIX V (ORTHOGONAL) OF THE DECOMPOSITION IF
C          MATV HAS BEEN SET TO .TRUE.  OTHERWISE V IS NOT REFERENCED.
C          V MAY ALSO COINCIDE WITH A IF U IS NOT NEEDED.  IF AN ERROR
C          EXIT IS MADE, THE COLUMNS OF V CORRESPONDING TO INDICES OF
C          CORRECT SINGULAR VALUES SHOULD BE CORRECT,
C
C        Z CONTAINS THE MATRIX X IN THE SINGULAR VALUE DECOMPOSITION
C                  T
C          OF R=XSY,  IF THE MODIFIED ALGORITHM IS USED. IF THE
C          GOLUB-REINSCH PROCEDURE IS USED, THEN IT IS NOT REFERENCED.
C          IF MATU HAS BEEN SET TO .FALSE.,  Z MAY COINCIDE
C          WITH A OR V AND IS NOT REFERENCED,
C
C        ERROR CONDITIONS-
C          10+K       IF THE K-TH SINGULAR VALUE HAS NOT BEEN
C                     DETERMINED AFTER 30 ITERATIONS (RECOVERABLE)
C          1          IF IRHS .LT. 0
C          2          IF M .LT. N
C          3          IF NAU .LT. M
C          4          IF NV .LT. N
C
C     PROGRAMMED BY   TONY CHAN, APPLIED MATH DEPT.,101-50,
C                     CALTECH,PASADENA, CA 91125.
C     MODIFIED   MARCH,1979.
C     MODIFIED   NOVEMBER,1982.
C
C     -----------------------------------------------------------------
C
C     SET VALUE FOR C. THE VALUE FOR C DEPENDS ON THE RELATIVE
C     EFFICIENCY OF FLOATING POINT MULTIPLICATIONS, FLOATING POINT
C     ADDITIONS AND TWO-DIMENSIONAL ARRAY INDEXINGS ON THE
C     COMPUTER WHERE THIS SUBROUTINE IS TO BE RUN.  C SHOULD
C     USUALLY BE BETWEEN 2 AND 4.  FOR DETAILS ON CHOOSING C, SEE
C     (2).  THE ALGORITHM IS NOT SENSITIVE TO THE VALUE OF C
C     ACTUALLY USED AS LONG AS C IS BETWEEN 2 AND 4.
C
      IF (MFLAG.EQ.1) GO TO 8
C
C     USE GOLUB-REINSCH PROCEDURE
C
      CALL DG2SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,B,IRHS,RV1)
      RETURN
C
C     USE MODIFIED ALGORITHM
C
  8   DO 10 I=1,M
          DO 10 J=1,N
   10         U(I,J)=A(I,J)
C
C     TRIANGULARIZE U BY HOUSEHOLDER TRANSFORMATIONS, USING
C     W AND RV1 AS TEMPORARY STORAGE.
C
      DO 20 I=1,N
          G=0.0
          S=0.0
          SCALE=0.0
C
C         PERFORM SCALING OF COLUMNS TO AVOID UNNECESSARY OVERFLOW
C         OR UNDERFLOW
C
          DO 30 K=I,M
              SCALE = SCALE + DABS(U(K,I))
  30      CONTINUE
              RV1(I) = 0.D0
          IF (SCALE .EQ. 0.0) GO TO 20
          DO 40 K=I,M
              U(K,I) = U(K,I)/SCALE
              S = S + U(K,I)**2
  40      CONTINUE
C
C         THE VECTOR E OF THE HOUSEHOLDER TRANSFORMATION I + EE-/H
C         WILL BE STORED IN COLUMN I OF U. THE TRANSFORMED ELEMENT
C         U(I,I) WILL BE STORED IN W(I) AND THE SCALAR H IN
C         RV1(I-1).
C
          F = U(I,I)
          G = -DSIGN(DSQRT(S),F)
          H = F*G - S
          U(I,I) = F - G
          RV1(I) = H
          W(I) = SCALE * G
C
          IF (I .EQ. N) GO TO 85
C
C         APPLY TRANSFORMATIONS TO REMAINING COLUMNS OF A
C
          IP1 = I + 1
          DO 50 J=IP1,N
              S = 0.0
              DO 60 K=I,M
   60             S = S + U(K,I)*U(K,J)
              F = S/H
              DO 70 K=I,M
                  U(K,J) = U(K,J) + F*U(K,I)
  70          CONTINUE
  50      CONTINUE
C
C         APPLY TRANSFORMATIONS TO COLUMNS OF B IF IRHS .GT. 0
C
 85       IF (IRHS .EQ. 0) GO TO 20
          DO 80 J=1,IRHS
              S = 0.0
              DO 90 K=I,M
  90              S = S + U(K,I)*B(K,J)
              F = S/H
              DO 100 K=I,M
                  B(K,J) = B(K,J) + F*U(K,I)
  100         CONTINUE
  80      CONTINUE
  20  CONTINUE
C
C     COPY R INTO Z IF MATU = .TRUE.
C
      IF (.NOT.MATU) GO TO 300
C
      DO 110 I=1,N
          DO 105 J=I,N
              Z(J,I) = U(J,I)
              U(J,I) = 0.0
 105      CONTINUE
          U(I,I) = W(I)
 110  CONTINUE
      CALL DG2SVD(NAU,NV,N,N,U,W,MATU,U,MATV,V,B,IRHS,D)
      CALL DM1THB(M, N, U, NAU, Z, RV1, D)
      RETURN
C
C     FORM R IN U BY ZEROING THE LOWER TRIANGULAR PART OF R IN U
C
  300 IF (N .EQ. 1) GO TO 280
      DO 260 I=2,N
          IM1 = I - 1
          DO 270 J=1,IM1
  270         U(I,J) = 0.0
          U(I,I) = W(I)
  260 CONTINUE
 280  U(1,1) = W(1)
C
      CALL DG2SVD(NAU,NV,N,N,U,W,MATU,U,MATV,V,B,IRHS,RV1)
      RETURN
C     THE BODY OF SUBROUTINE DG2SVD SHOULD BE INCLUDED WITH HYBSVD
C
      END
