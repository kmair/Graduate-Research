      SUBROUTINE L4ZIT(N,A,NA,B,NB,X,NX,WANTX,EIGA,EIGB,ITER,MAXITR)
C
C THIS SUBROUTINE SOLVES THE GENERALIZED EIGENVALUE PROBLEM
C              A X  = LAMBDA B X
C WHERE A IS A COMPLEX UPPER HESSENBERG MATRIX OF
C ORDER N AND B IS A COMPLEX UPPER TRIANGULAR MATRIX OF ORDER N
C
C
C INPUT PARAMETERS
C
C
C N      ORDER OF A AND B
C
C A      AN N X N UPPER HESSENBERG COMPLEX MATRIX
C
C NA     THE ROW DIMENSION OF THE A MATRIX
C
C B      AN N X N UPPER TRIANGULAR COMPLEX MATRIX
C
C NB     THE ROW DIMENSION OF THE B MATRIX
C
C X      CONTAINS TRANSFORMATIONS TO OBTAIN EIGENVECTORS OF
C        ORIGINAL SYSTEM. IF EIGENVECTORS ARE REQUESTED AND QZHES
C        IS NOT CALLED, X SHOULD BE SET TO THE IDENTITY MATRIX
C
C NX     THE ROW DIMENSION OF THE X MATRIX
C
C WANTX  LOGICAL VARIABLE WHICH SHOULD BE SET TO .TRUE.
C        IF EIGENVECTORS ARE WANTED. OTHERWISE IT
C        SHOULD BE SET TO .FALSE.
C MAXITR NUMBER OF ITERATIONS TOLERATED
C
C
C
C OUTPUT PARAMETERS
C
C
C X      THE ITH COLUMN CONTAINS THE ITH EIGENVECTOR
C        IF EIGENVECTORS ARE REQUESTED
C
C ITER   IF THE NUMBER OF ITERATIONS EXCEEDS MAXITR, ITER IS -1,
C        ELSE 0
C EIGA   A COMPLEX ARRAY OF LENGTH N CONTAINING THE DIAGONAL OF A
C
C EIGB   A COMPLEX ARRAY OF LENGTH N CONTAINING THE DIAGONAL OF B
C
C THE ITH EIGENVALUE CAN BE FOUND BY DIVIDING EIGA(I) BY
C EIGB(I). WATCH OUT FOR EIGB(I) BEING ZERO
C
C
C
C
      COMPLEX A(NA,N),B(NB,N),EIGA(N),EIGB(N)
      COMPLEX S,W,Y,Z,CSQRT
      COMPLEX X(NX,N)
      COMPLEX ANNM1,ALFM,BETM,D,SL,DEN,NUM,ANM1M1
      REAL EPSA,EPSB,SS,R,ANORM,BNORM,ANI,BNI
      REAL D0,D1,D2,E0,E1
      LOGICAL WANTX
      NN=N
C
C
      ITER=0
      ANORM = 0.
      BNORM = 0.
      DO  5 I=1,N
        ANI = 0.
        IF (I.EQ.1) GO TO 2
          Y=A(I,I-1)
          ANI=ANI+ABS(REAL(Y))+ABS(AIMAG(Y))
    2  BNI = 0.
        DO 3   J=I,N
          ANI=ANI+ABS(REAL(A(I,J)))+ABS(AIMAG(A(I,J)))
          BNI=BNI+ABS(REAL(B(I,J)))+ABS(AIMAG(B(I,J)))
    3   CONTINUE
        IF (ANI.GT.ANORM) ANORM = ANI
        IF (BNI.GT.BNORM) BNORM = BNI
    5 CONTINUE
      IF (ANORM.EQ.0.) ANORM = 1.0
      IF (BNORM.EQ.0.) BNORM = 1.0
C
      EPSA=ANORM*R1MACH(4)
      EPSB=BNORM*R1MACH(4)
      IF (N.LE.1) GO TO 100
   10 ITS=0
      NM1=NN-1
C
C CHECK FOR NEGLIGIBLE SUBDIAGONAL ELEMENTS
C
 11   D2=ABS(REAL(A(NN,NN)))+ABS(AIMAG(A(NN,NN)))
      DO 12 LB=2,NN
        L=NN+2-LB
        SS=D2
        Y=A(L-1,L-1)
        D2=ABS(REAL(Y))+ABS(AIMAG(Y))
        SS=SS+D2
        Y=A(L,L-1)
        R=SS+ABS(REAL(Y))+ABS(AIMAG(Y))
        IF(R.EQ.SS) GO TO 13
   12 CONTINUE
      L=1
   13 IF(L.EQ.NN) GO TO 100
      IF (ITS.LT.MAXITR) GO TO 20
      ITER=-1
      IF (ABS(REAL(A(NN,NM1)))+ABS(AIMAG(A(NN,NM1))).GT.0.8*
     C  ABS(REAL(ANNM1))+ABS(AIMAG(ANNM1))) RETURN
   20 IF(ITS.EQ.10.OR.ITS.EQ.20) GO TO 28
C
C COMPUTE SHIFT AS EIGENVALUE OF LOWER 2 BY 2
C
      ANNM1=A(NN,NM1)
      ANM1M1=A(NM1,NM1)
      S=A(NN,NN)*B(NM1,NM1)-ANNM1*B(NM1,NN)
      W=ANNM1*B(NN,NN)*(A(NM1,NN)*B(NM1,NM1)-B(NM1,NN)*ANM1M1)
      Y=(ANM1M1*B(NN,NN)-S)/2.
      Z=CSQRT(Y*Y+W)
      IF (REAL(Z).EQ.0.0.AND.AIMAG(Z).EQ.0.0) GO TO 26
      D0=Y/Z
      IF(D0.LT.0.0) Z=-Z
   26 DEN=(Y+Z)*B(NM1,NM1)*B(NN,NN)
      IF(REAL(DEN).EQ.0.0.AND.AIMAG(DEN).EQ.0.0) DEN=CMPLX(EPSA,0.0)
      NUM=(Y+Z)*S-W
      GO TO 30
C
C AD-HOC SHIFT
C
   28 Y=A(NM1,NN-2)
      NUM=CMPLX(ABS(REAL(ANNM1))+ABS(AIMAG(ANNM1)),ABS(REAL(Y))+
     1ABS(AIMAG(Y)))
      DEN=(1.0,0.0)
C
C CHECK FOR 2 CONSECUTIVE SMALL SUBDIAGONAL ELEMENTS
C
   30 IF(NN.EQ.L+1) GO TO 35
      D2=ABS(REAL(A(NM1,NM1)))+ABS(AIMAG(A(NM1,NM1)))
      E1=ABS(REAL(ANNM1))+ABS(AIMAG(ANNM1))
      D1=ABS(REAL(A(NN,NN)))+ABS(AIMAG(A(NN,NN)))
      NL=NN-(L+1)
      DO 34 MB=1,NL
        M=NN-MB
        E0=E1
        Y=A(M,M-1)
        E1=ABS(REAL(Y))+ABS(AIMAG(Y))
        D0=D1
        D1=D2
        Y=A(M-1,M-1)
        D2=ABS(REAL(Y))+ABS(AIMAG(Y))
        Y=A(M,M)*DEN-B(M,M)*NUM
        D0=(D0+D1+D2)*(ABS(REAL(Y))+ABS(AIMAG(Y)))
        E0=E0*E1*(ABS(REAL(DEN))+ABS(AIMAG(DEN)))+D0
        IF(E0.EQ.D0) GO TO 36
   34 CONTINUE
   35 M=L
   36 CONTINUE
      ITS=ITS+1
      W=A(M,M)*DEN-B(M,M)*NUM
      Z=A(M+1,M)*DEN
      D1=ABS(REAL(Z))+ABS(AIMAG(Z))
      D2=ABS(REAL(W))+ABS(AIMAG(W))
C
C FIND L AND M AND SET A=LAM AND B=LBM
C
      NP1=N+1
      LOR1=L
      NNORN=NN
      IF (.NOT.WANTX) GO TO 42
        LOR1=1
        NNORN=N
   42 DO 90 I=M,NM1
        J=I+1
C
C FIND ROW TRANSFORMATIONS TO RESTORE A TO
C UPPER HESSENBERG FORM. APPLY TRANSFORMATIONS
C TO A AND B
C
        IF (I.EQ.M) GO TO 50
        W=A(I,I-1)
        Z=A(J,I-1)
        D1=ABS(REAL(Z))+ABS(AIMAG(Z))
        D2=ABS(REAL(W))+ABS(AIMAG(W))
        IF (D1.EQ.0.0) GO TO 11
   50   IF (D2.GT.D1) GO TO 60
C
C MUST INTERCHANGE ROWS
C
          DO 55 K=I,NNORN
            Y=A(I,K)
            A(I,K)=A(J,K)
            A(J,K)=Y
            Y=B(I,K)
            B(I,K)=B(J,K)
            B(J,K)=Y
   55     CONTINUE
          IF (I.GT.M) A(I,I-1)=A(J,I-1)
          IF(D2.EQ.0.0) GO TO 65
C
C THE SCALING OF W AND Z IS DESIGNED TO AVOID A DIVISION BY ZERO
C WHEN THE DENOMINATOR IS SMALL
C
          Y=CMPLX(REAL(W)/D1,AIMAG(W)/D1)/CMPLX(REAL(Z)/D1,AIMAG(Z)/D1)
          GO TO 62
   60   Y=CMPLX(REAL(Z)/D2,AIMAG(Z)/D2)/CMPLX(REAL(W)/D2,AIMAG(W)/D2)
   62   DO 64 K=I,NNORN
          A(J,K)=A(J,K)-Y*A(I,K)
          B(J,K)=B(J,K)-Y*B(I,K)
   64   CONTINUE
        IF (I.GT.M) A(J,I-1)=(0.0,0.0)
C
C PERFORM TRANSFORMATIONS FROM RIGHT TO RESTORE B TO
C   TRIANGLULAR FORM
C APPLY TRANSFORMATIONS TO A
C
   65     Z=B(J,I)
          W=B(J,J)
          D2=ABS(REAL(W))+ABS(AIMAG(W))
          D1=ABS(REAL(Z))+ABS(AIMAG(Z))
          IF (D1.EQ.0.0) GO TO 11
          IF (D2.GT.D1) GO TO 80
C
C MUST INTERCHANGE COLUMNS
C
          DO 70 K=LOR1,J
            Y=A(K,J)
            A(K,J)=A(K,I)
            A(K,I)=Y
            Y=B(K,J)
            B(K,J)=B(K,I)
            B(K,I)=Y
   70     CONTINUE
          IF (I.EQ.NM1) GO TO 75
            Y=A(J+1,J)
            A(J+1,J)=A(J+1,I)
            A(J+1,I)=Y
   75     IF(.NOT.WANTX) GO TO 79
          DO 78 K=1,N
            Y=X(K,J)
            X(K,J)=X(K,I)
            X(K,I)=Y
   78     CONTINUE
   79     IF(D2.EQ.0.0) GOTO 90
          Z=CMPLX(REAL(W)/D1,AIMAG(W)/D1)/CMPLX(REAL(Z)/D1,AIMAG(Z)/D1)
          GO TO 81
   80     Z=CMPLX(REAL(Z)/D2,AIMAG(Z)/D2)/CMPLX(REAL(W)/D2,AIMAG(W)/D2)
   81   DO 82 K=LOR1,J
          A(K,I)=A(K,I)-Z*A(K,J)
          B(K,I)=B(K,I)-Z*B(K,J)
   82   CONTINUE
        B(J,I)=(0.0,0.0)
        IF (I.LT.NM1) A(I+2,I)=A(I+2,I)-Z*A(I+2,J)
        IF(.NOT.WANTX) GO TO 90
        DO 85 K=1,N
          X(K,I)=X(K,I)-Z*X(K,J)
   85   CONTINUE
   90 CONTINUE
      GO TO 11
C
  100 CONTINUE
      EIGA(NN)=A(NN,NN)
      EIGB(NN)=B(NN,NN)
      IF (NN.EQ.1) GO TO 110
      NN=NM1
      IF (NN.GT.1) GO TO 10
      GO TO 100
C
C FIND EIGENVECTORS USING B FOR INTERMEDIATE STORAGE
C
  110 IF(.NOT.WANTX) RETURN
      M=N
  115 CONTINUE
      ALFM=A(M,M)
      BETM=B(M,M)
      B(M,M)=(1.0,0.0)
      L = M-1
      IF (L.EQ.0) GO TO 140
  120 CONTINUE
        L1 = L+1
        SL = CMPLX(0.0,0.0)
        DO 130 J=L1,M
          SL = SL + (BETM*A(L,J)-ALFM*B(L,J))*B(J,M)
  130   CONTINUE
        Y = BETM*A(L,L)-ALFM*B(L,L)
        IF(REAL(Y).EQ.0.0.AND.AIMAG(Y).EQ.0.0) Y=CMPLX((EPSA+EPSB)/
     1   2.0,0.0)
        B(L,M) = -SL/Y
        L = L-1
  140 IF (L.GT.0) GO TO 120
      M=M-1
      IF (M.GT.0) GO TO 115
C
C TRANSFORM TO ORIGINAL COORDINATE SYSTEM
C
      M=N
  200 CONTINUE
        DO 220 I=1,N
          S = CMPLX(0.,0.)
          DO 210 J=1,M
            S = S + X(I,J)*B(J,M)
  210     CONTINUE
          X(I,M) = S
  220   CONTINUE
        M = M-1
      IF (M.GT.0) GO TO 200
C
C NORMALIZE SO THAT LARGEST COMPONENT = 1.
C
      M=N
  230 CONTINUE
        SS = 0.
        DO 235 I=1,N
          R=ABS(REAL(X(I,M)))+ABS(AIMAG(X(I,M)))
          IF (R.LT.SS) GO TO 235
          SS = R
          D = X(I,M)
  235   CONTINUE
        IF (SS.EQ.0.0) GO TO 245
        DO 240 I=1,N
          X(I,M) = X(I,M)/D
  240   CONTINUE
  245 M = M-1
      IF (M.GT.0) GO TO 230
      RETURN
      END
