      SUBROUTINE L2SFG(FW,MD,MQ,K,T,NT,A)
C
C
C TO FIT A FUNCTION F WITH A B-SPLINE.
C
C THE MNEMONIC IS - DOUBLE PRECISION L2 SPLINE FIT TO A FUNCTION,
C                   USING GAUSSIAN QUADRATURE.
C
C METHOD - WEIGHTED LEAST-SQUARES FIT.
C
C   THE FUNCTIONAL
C
C       SUM(J = 1,...,MD) INTEGRAL ( T(1) TO T(NT) )
C          ( (F-SUP-(J-1) - F-SUP-(J-1))**2 * W-SUB-J (X) ) DX
C
C   IS MINIMIZED OVER ALL B-SPLINES F OF ORDER K ON THE MESH T.
C
C   THE INTEGRALS ARE DONE PIECEWISE WITH AN MQ POINT
C   GAUSSIAN-QUADRATURE RULE.
C
C INPUT -
C
C   FW     - THE NAME OF A USER SUPPLIED SUBROUTINE
C
C                    FW(X,NX,MD,FX,WX)
C
C            F MUST BE DECLARED EXTERNAL IN THE USER S CALLING PROGRAM
C
C            INPUT -
C
C              X    - THE POINTS WHERE F AND W ARE TO BE EVALUATED
C              NX   - THE LENGTH OF THE ARRAY X.
C              MD   - THE NUMBER OF DERIVATIVES TO BE EVALUATED AN
C
C            OUTPUT -
C
C              FX - FX(I,J) = THE (J-1)-ST DERIVATIVE OF F AT X(I)
C                             J = 1,...,MD, I = 1,...,NX.
C              WX - WX(I,J) = THE WEIGHT W-SUB-J (X) FOR THE
C                             (J-1)-ST DERIVATIVE OF F AT X(I),
C                             J = 1,...,MD, I = 1,...,NX.
C                   IF WX IS NOT SET, WX = 1 IS THE DEFAULT.
C
C   MD     - THE NUMBER OF DERIVATIVES TO BE USED IN THE FITTING.
C   MQ     - THE NUMBER OF POINTS IN THE GAUSSIAN QUADRATURE RULE.
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.
C   T      - THE B-SPLINE MESH TO BE USED IN THE FITTING PROCEDURE
C   NT     - THE NUMBER OF POINTS IN THE MESH T.
C
C OUTPUT -
C
C   A      - THE COEFFICIENTS FOR THE B-SPLINE APPROXIMATION.
C
C SCRATCH SPACE ALLOCATED -
C
C   LET NDT = THE NUMBER OF DISTINCT POINTS IN THE B-SPLINE MESH T
C   AND NXFIT = (NDT-1)*MQ.
C
C   THEN,         S( L2SFG) =
C
C     2*MQ +
C
C     MAX( 17*MQ , NXFIT*(2*MD+1) +
C
C                  MAX( S(FW) , (NT-K+MD)*K +
C
C                               MAX( 3*K , K*(MIN((K+1)/2,MD) + 1)
C
C                               MD INTEGER ) )
C
C   WORDS.
C
C ERROR STATES -
C
C    1 - MD.LT.1.
C    2 - MD.GT.K.
C    3 - MQ.LT.1.
C    4 - K.LT.2.
C    5 - NT.LE.K.
C    6 - THE MESH T IS NOT MONOTONE INCREASING.
C    7 - MULT(T(I)).GT.K.
C    8 - (NDT-1)*MQ*MD.LT.NT-K.
C    9 - NEGATIVE WEIGHTS. (RECOVERABLE)
C   10 - SINGULAR LEAST SQUARES MATRIX. (RECOVERABLE)
C
      LOGICAL LS(1000)
      INTEGER IS(1000)
      REAL RS(1000)
      REAL WS(500)
      DOUBLE PRECISION DS(500)
      COMMON /CSTAK/DS
      INTEGER I,NDT,IXQ,IWQ,ISTKGT,NERROR,NERR
      EXTERNAL FW
      INTEGER MD,MQ,K,NT
      REAL T(NT),A(1)
C
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )
C
C
C A(NT-K)
C
C
C
      CALL ENTER(1)
C
C CHECK THE INPUT FOR ERRORS.
C
      IF( MD.GE.1 )      GOTO 1000
C/6S
C     CALL SETERR(16H L2SFG - MD.LT.1,16,1,2)
C/7S
      CALL SETERR(' L2SFG - MD.LT.1',16,1,2)
C/
 1000 CONTINUE
      IF( MD.LE.K )      GOTO 1002
C/6S
C     CALL SETERR(16H L2SFG - MD.GT.K,16,2,2)
C/7S
      CALL SETERR(' L2SFG - MD.GT.K',16,2,2)
C/
 1002 CONTINUE
      IF( MQ.GE.1 )      GOTO 1004
C/6S
C     CALL SETERR(16H L2SFG - MQ.LT.1,16,3,2)
C/7S
      CALL SETERR(' L2SFG - MQ.LT.1',16,3,2)
C/
 1004 CONTINUE
      IF( K.GE.2 )      GOTO 1006
C/6S
C     CALL SETERR(15H L2SFG - K.LT.2,15,4,2)
C/7S
      CALL SETERR(' L2SFG - K.LT.2',15,4,2)
C/
 1006 CONTINUE
      IF( NT.GT.K )      GOTO 1008
C/6S
C     CALL SETERR(16H L2SFG - NT.LE.K,16,5,2)
C/7S
      CALL SETERR(' L2SFG - NT.LE.K',16,5,2)
C/
 1008 CONTINUE
C
C GET THE FITTING POINTS.
C
      NDT = 1
C FIND THE NUMBER OF DISTINCT MESH POINTS.
      I21012 = NT-1
      DO 1010 I = 1, I21012
      IF( T(I).LE.T(I+1) )      GOTO 1013
C/6S
C           CALL SETERR(46H L2SFG - THE MESH T IS NOT MONOTONE INCREASIN
C    *G,46,6,2)
C/7S
            CALL SETERR(' L2SFG - THE MESH T IS NOT MONOTONE INCREASING'
     *,46,6,2)
C/
 1013 CONTINUE
      IF( T(I+1).LE.T(I) )      GOTO 1015
      NDT = NDT + (1)
 1015 CONTINUE
      IF( I+K.LE.NT )      GOTO 1017
      GOTO 1010
 1017 CONTINUE
      IX1005 = I+K
      IF( T(IX1005).NE.T(I) )      GOTO 1019
C/6S
C     CALL SETERR(24H L2SFG - MULT(T(I)).GT.K,24,7,2)
C/7S
      CALL SETERR(' L2SFG - MULT(T(I)).GT.K',24,7,2)
C/
 1019 CONTINUE
C
 1010 CONTINUE
 1011 CONTINUE
      IF( (NDT-1)*MQ*MD.GE.NT-K )      GOTO 1021
C/6S
C     CALL SETERR(30H L2SFG - (NDT-1)*MQ*MD.LT.NT-K,30,8,2)
C/7S
      CALL SETERR(' L2SFG - (NDT-1)*MQ*MD.LT.NT-K',30,8,2)
C/
 1021 CONTINUE
C
C GET THE GAUSSIAN QUADRATURE RULE.
C
      IXQ = ISTKGT(MQ,3)
      IWQ = ISTKGT(MQ,3)
      CALL GQ1(MQ,WS(IXQ),WS(IWQ))
C
      CALL L2SFQ(FW,MD,WS(IXQ),WS(IWQ),MQ,K,T,NT,A)
C
      IF( NERROR(NERR).NE.10 )      GOTO 1023
      CALL ERROFF
C/6S
C     CALL SETERR(25H L2SFG - NEGATIVE WEIGHTS,25,9,1)
C/7S
      CALL SETERR(' L2SFG - NEGATIVE WEIGHTS',25,9,1)
C/
      GOTO 1024
 1023 CONTINUE
      IF( NERROR(NERR).NE.11 )      GOTO 1025
      CALL ERROFF
C/6S
C           CALL SETERR(38H L2SFG - SINGULAR LEAST SQUARES MATRIX,38,10,
C    *1)
C/7S
            CALL SETERR(' L2SFG - SINGULAR LEAST SQUARES MATRIX',38,10,
     *1)
C/
C
 1025 CONTINUE
 1024 CONTINUE
      CALL LEAVE
C
      RETURN
C
      END
