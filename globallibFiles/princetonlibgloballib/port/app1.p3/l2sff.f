      SUBROUTINE L2SFF(FW,K,T,NT,A)
C
C
C TO FIT A FUNCTION F WITH A B-SPLINE.
C
C THE MNEMONIC IS - DOUBLE PRECISION L2 SPLINE FIT TO A FUNCTION.
C
C METHOD - WEIGHTED LEAST-SQUARES FIT.
C
C   THE FUNCTIONAL
C
C       INTEGRAL ( T(1) TO T(NT) )
C          ( (F - F)**2 * W(X) ) DX
C
C   IS MINIMIZED OVER ALL B-SPLINES F OF ORDER K ON THE MESH T.
C
C   THE INTEGRALS ARE DONE PIECEWISE WITH A K POINT
C   GAUSSIAN-QUADRATURE RULE.
C
C INPUT -
C
C   FW     - THE NAME OF A USER SUPPLIED SUBROUTINE
C
C                    FW(X,NX,FX,WX)
C
C            F MUST BE DECLARED EXTERNAL IN THE USER S CALLING PROGRAM
C
C            INPUT -
C
C              X    - THE POINTS WHERE F AND W ARE TO BE EVALUATED
C              NX   - THE LENGTH OF THE ARRAY X.
C
C            OUTPUT -
C
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.
C              WX - WX(I) = W( X(I) ), I = 1,...,NX.
C                   IF WX IS NOT SET, WX = 1 IS THE DEFAULT.
C
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.
C   T      - THE B-SPLINE MESH TO BE USED IN THE FITTING PROCEDURE
C   NT     - THE NUMBER OF POINTS IN THE MESH T.
C
C OUTPUT -
C
C   A      - THE COEFFICIENTS FOR THE B-SPLINE APPROXIMATION.
C
C SCRATCH SPACE ALLOCATED -
C
C   LET NDT = THE NUMBER OF DISTINCT POINTS IN THE B-SPLINE MESH T
C   AND NXFIT = (NDT-1) * K
C
C   THEN,         S( L2SFF) =
C
C     NXFIT + 2*K +
C
C     MAX( 17*K , 2*NXFIT +
C
C                 MAX ( S(FW) , (NT-K+4)*K + 1 INTEGER ) )
C
C   WORDS.
C
C ERROR STATES -
C
C   1 - K.LT.2.
C   2 - NT.LE.K.
C   3 - THE MESH T IS NOT MONOTONE INCREASING.
C   4 - MULT(T(I)).GT.K.
C   5 - NEGATIVE WEIGHTS. (RECOVERABLE)
C   6 - SINGULAR LEAST SQUARES MATRIX. (RECOVERABLE)
C
      LOGICAL LS(1000)
      INTEGER IS(1000)
      REAL RS(1000)
      REAL WS(500)
      DOUBLE PRECISION DS(500)
      COMMON /CSTAK/DS
            INTEGER I,J,NDT,NXFIT,IXFIT,JXFIT,IY,IW,IXQ,IWQ,ISTKGT,NERRO
     *R,NERR
      EXTERNAL FW
      INTEGER K,NT
      REAL T(NT),A(1)
C
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )
C
C
C A(NT-K)
C
C
C
      CALL ENTER(1)
C
C CHECK THE INPUT FOR ERRORS.
C
      IF( K.GE.2 )      GOTO 1000
C/6S
C     CALL SETERR(15H L2SFF - K.LT.2,15,1,2)
C/7S
      CALL SETERR(' L2SFF - K.LT.2',15,1,2)
C/
 1000 CONTINUE
      IF( NT.GT.K )      GOTO 1002
C/6S
C     CALL SETERR(16H L2SFF - NT.LE.K,16,2,2)
C/7S
      CALL SETERR(' L2SFF - NT.LE.K',16,2,2)
C/
 1002 CONTINUE
C
C GET THE FITTING POINTS.
C
      NDT = 1
C FIND THE NUMBER OF DISTINCT MESH POINTS.
      I21006 = NT-1
      DO 1004 I = 1, I21006
      IF( T(I).LE.T(I+1) )      GOTO 1007
C/6S
C           CALL SETERR(46H L2SFF - THE MESH T IS NOT MONOTONE INCREASIN
C    *G,46,3,2)
C/7S
            CALL SETERR(' L2SFF - THE MESH T IS NOT MONOTONE INCREASING'
     *,46,3,2)
C/
 1007 CONTINUE
      IF( T(I+1).LE.T(I) )      GOTO 1009
      NDT = NDT + (1)
 1009 CONTINUE
      IF( I+K.LE.NT )      GOTO 1011
      GOTO 1004
 1011 CONTINUE
      IX1005 = I+K
      IF( T(IX1005).NE.T(I) )      GOTO 1013
C/6S
C     CALL SETERR(24H L2SFF - MULT(T(I)).GT.K,24,4,2)
C/7S
      CALL SETERR(' L2SFF - MULT(T(I)).GT.K',24,4,2)
C/
 1013 CONTINUE
C
 1004 CONTINUE
 1005 CONTINUE
      NXFIT = K*(NDT-1)
C
      IXFIT = ISTKGT(NXFIT,3)
C CREATE THE FITTING POINTS.
C
      IXQ = ISTKGT(K,3)
      IWQ = ISTKGT(K,3)
C GET THE GAUSS-QUADRATURE RULE.
      CALL GQ1(K,WS(IXQ),WS(IWQ))
C
      JXFIT = IXFIT
      I21017 = NT-1
      DO 1015 I = 1, I21017
      IF( T(I).NE.T(I+1) )      GOTO 1018
      GOTO 1015
 1018 CONTINUE
C
      DO 1020 J = 1, K
      IX1004 = IXQ+J-1
            WS(JXFIT) = AMAX1(T(I),AMIN1(0.5E0*((T(I)+T(I+1))+(T(I+1)-T(
     *I))*WS(IX1004)),T(I+1)))
      JXFIT = JXFIT + (1)
 1020 CONTINUE
 1021 CONTINUE
C
 1015 CONTINUE
 1016 CONTINUE
      IY = ISTKGT(NXFIT,3)
      IW = ISTKGT(NXFIT,3)
C
      CALL SETR(NXFIT,1.0E0,WS(IW))
C DEFAULT WEIGHTS.
C
      CALL FW(WS(IXFIT),NXFIT,WS(IY),WS(IW))
C
      JXFIT = IW
C NOW ADJUST THE WEIGHTS.
      I21025 = NT-1
      DO 1023 I = 1, I21025
      IF( T(I).NE.T(I+1) )      GOTO 1026
      GOTO 1023
 1026 CONTINUE
C
      DO 1028 J = 1, K
      IX1001 = IWQ+J-1
      WS(JXFIT) = WS(JXFIT) * (0.5E0*(T(I+1)-T(I))*WS(IX1001))
      IF( WS(JXFIT).GE.0.0E0 )      GOTO 1031
C/6S
C     CALL SETERR(25H L2SFF - NEGATIVE WEIGHTS,25,5,1)
C/7S
      CALL SETERR(' L2SFF - NEGATIVE WEIGHTS',25,5,1)
C/
      CALL LEAVE
      RETURN
 1031 CONTINUE
      JXFIT = JXFIT + (1)
 1028 CONTINUE
 1029 CONTINUE
C
 1023 CONTINUE
 1024 CONTINUE
      CALL DL2SH(WS(IXFIT),WS(IY),NXFIT,1,WS(IW),K,T,NT,A)
C
      IF( NERROR(NERR).EQ.0 )      GOTO 1033
      CALL ERROFF
C/6S
C           CALL SETERR(38H L2SFF - SINGULAR LEAST SQUARES MATRIX,38,6,1
C    *)
C/7S
            CALL SETERR(' L2SFF - SINGULAR LEAST SQUARES MATRIX',38,6,1
     *)
C/
C
 1033 CONTINUE
      CALL LEAVE
C
      RETURN
C
      END
