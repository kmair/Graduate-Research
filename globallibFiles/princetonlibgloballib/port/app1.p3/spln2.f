      SUBROUTINE SPLN2(K,T,N,A,
     1                  X,NX,
     2                  ID,NID,
     3                  FX,
     4                  IDIM,ADIFF,ILO,ILEFT)
C
C  TO EVALUATE THE B-SPLINE AND ITS DERIVATIVES
C
C        FX(I,J) = F(ID(J))(X(I))
C
C  FOR I=1,...,NX AND J=1,...,NID WHERE
C
C      F(X) = SUM(I=1,...,N-K)(A(I)*B(I)(X)).
C
C  INPUT
C
C    K     - THE ORDER OF THE B-SPLINES TO BE USED.
C            2.LE.K IS ASSUMED.
C    T     - THE B-SPLINE MESH.
C    N     - THE NUMBER OF POINTS IN THE MESH T.
C    A     - THE B-SPLINE COEFFICIENTS, N-K OF THEM.
C    X     - POINTS OF EVALUATION FOR THE B-SPLINE.
C            X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY.
C    NX    - THE NUMBER OF POINTS IN X.
C    ID    - DERIVATIVES OF THE B-SPLINE DESIRED.
C            0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.
C    NID   - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.
C    IDIM  - K.LE.IDIM IS ASSUMED. THE LARGER IDIM IS, THE FASTER SPLN2
C            RUNS, SO LONG AS X IS MONOTONE INCREASING.
C            IDIM NEED NOT BE LARGER THAN N+K-2.
C    ADIFF - A REAL SCRATCH ARRAY OF LENGTH IDIM*NID.
C    ILO   - IF ILO.LE.0 THEN COMPUTATION STARTS FROM SCRATCH.
C            IF ILO.GT.0 THEN THE VALUES OF K,T,N,A,ID,NID,IDIM,ILO AND
C            ADIFF ARE ASSUMED TO BE UNCHANGED FROM THE LAST CALL.
C    ILEFT - T(ILEFT).LE.X(1).LT.T(ILEFT+1) WOULD HELP, BUT IT IS NOT
C            NECESSARY.
C
C  OUTPUT
C
C    FX     - THE VALUES OF F AND ITS DERIVATIVES.
C    ADIFF  - SCRATCH VALUES ALTERED.
C    ILO    - SCRATCH VALUE ALTERED.
C    ILEFT  - THE INTERVAL INDICATOR FOR X(NX).
C
C  SCRATCH SPACE ALLOCATED - 3*K REAL WORDS.
C
C  ERROR STATES -
C
C    1 - K.LT.2.
C    2 - N.LE.K.
C    3 - NX.LT.1.
C    4 - NID.LT.1.
C    5 - ID(1).LT.0.
C    6 - ID IS NOT STRICTLY INCREASING.
C    7 - ID(NID).GE.K.
C    8 - IDIM.LT.K.
C    9 - T IS NOT MONOTONE INCREASING.
C
      REAL T(N),A(1),X(NX),FX(NX,NID),ADIFF(IDIM,NID)
C     REAL A(N-K)
      INTEGER ID(NID)
C
      LOGICAL A3PLNE
C
      COMMON /CSTAK/DS
      DOUBLE PRECISION DS(500)
      REAL WS(1)
      EQUIVALENCE (DS(1),WS(1))
C
C ... CHECK THE INPUT.
C
C/6S
C     IF (K.LT.2)
C    1   CALL SETERR(15H SPLN2 - K.LT.2,15,1,2)
C     IF (N.LE.K)
C    1   CALL SETERR(15H SPLN2 - N.LE.K,15,2,2)
C     IF (NX.LT.1)
C    1   CALL SETERR(16H SPLN2 - NX.LT.1,16,3,2)
C     IF (NID.LT.1)
C    1   CALL SETERR(17H SPLN2 - NID.LT.1,17,4,2)
C     IF (ID(1).LT.0)
C    1   CALL SETERR(19H SPLN2 - ID(1).LT.0,19,5,2)
C/7S
      IF (K.LT.2)
     1   CALL SETERR(' SPLN2 - K.LT.2',15,1,2)
      IF (N.LE.K)
     1   CALL SETERR(' SPLN2 - N.LE.K',15,2,2)
      IF (NX.LT.1)
     1   CALL SETERR(' SPLN2 - NX.LT.1',16,3,2)
      IF (NID.LT.1)
     1   CALL SETERR(' SPLN2 - NID.LT.1',17,4,2)
      IF (ID(1).LT.0)
     1   CALL SETERR(' SPLN2 - ID(1).LT.0',19,5,2)
C/
      IF (NID.EQ.1) GO TO 20
      DO 10 I=2,NID
C/6S
C       IF (ID(I-1).GE.ID(I))
C    1    CALL SETERR(38H SPLN2 - ID IS NOT STRICTLY INCREASING,38,6,2)
C/7S
        IF (ID(I-1).GE.ID(I))
     1    CALL SETERR(' SPLN2 - ID IS NOT STRICTLY INCREASING',38,6,2)
C/
 10     CONTINUE
C/6S
C20   IF (ID(NID).GE.K)
C    1    CALL SETERR(21H SPLN2 - ID(NID).GE.K,21,7,2)
C     IF (IDIM.LT.K)
C    1   CALL SETERR(18H SPLN2 - IDIM.LT.K,18,8,2)
C/7S
 20   IF (ID(NID).GE.K)
     1    CALL SETERR(' SPLN2 - ID(NID).GE.K',21,7,2)
      IF (IDIM.LT.K)
     1   CALL SETERR(' SPLN2 - IDIM.LT.K',18,8,2)
C/
C
C ... ALLOCATE SCRATCH SPACE.
C
      IDM=ISTKGT(3*K,3)
C
C/6S
C     IF (.NOT.A3PLNE(K,T,N,A,X,NX,ID,NID,FX,IDIM,ADIFF,ILO,ILEFT,IDM))
C    1   CALL SETERR(37H SPLN2 - T IS NOT MONOTONE INCREASING,37,9,2)
C/7S
      IF (.NOT.A3PLNE(K,T,N,A,X,NX,ID,NID,FX,IDIM,ADIFF,ILO,ILEFT,IDM))
     1   CALL SETERR(' SPLN2 - T IS NOT MONOTONE INCREASING',37,9,2)
C/
C
      CALL ISTKRL(1)
C
      RETURN
C
      END
